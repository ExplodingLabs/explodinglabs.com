{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#iko","title":"ik\u014d","text":"<p>Iko is a command-line tool for reliable generation and management of database schema migrations.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Usage</li> <li>Commands</li> <li>Scripting</li> </ul>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#sqitch-commands","title":"Sqitch commands","text":"<p>Iko aliases all of Sqitch's commands.</p> <p>You can also access <code>sqitch</code> directly, for example:</p> <pre><code>iko sqitch --version\n</code></pre> <p>See the full list of Sqitch's commands.</p>"},{"location":"commands/#ad-hoc-migrations","title":"Ad-hoc migrations","text":"<p>If your change is not covered by the below commands, use <code>add</code> to crate an ad-hoc migration, for example:</p> <pre><code>add create_customer_view\n</code></pre> <p>You'll be required to set a note, and then write the deploy, verify and revert scripts yourself.</p> <p>\ud83d\udcd6 Refer to sqitch-add.</p>"},{"location":"commands/#comments","title":"Comments","text":"<p>\ud83d\udcd6 Refer to Postgres COMMENT.</p>"},{"location":"commands/#comment","title":"comment","text":"<p>Define or change the comment of an object.</p> <pre><code>comment &lt;object&gt; &lt;comment&gt;\n</code></pre> <p>The last argument is taken as the comment; everything before that is considered the object.</p> Example <p>To set a comment on the <code>api</code> schema:</p> <pre><code>comment schema api 'Schema for the API endpoints'\n</code></pre>"},{"location":"commands/#extensions","title":"Extensions","text":"<p>\ud83d\udcd6 Refer to Postgres CREATE EXTENSION.</p>"},{"location":"commands/#create_extension","title":"create_extension","text":"<p>Install an extension.</p> <pre><code>create_extension &lt;extension&gt;\n</code></pre> Example <p>To create an extension named <code>pgcrypto</code>:</p> <pre><code>create_extension pgcrypto\n</code></pre>"},{"location":"commands/#functions","title":"Functions","text":"<p>\ud83d\udcd6 Refer to Postgres CREATE FUNCTION.</p>"},{"location":"commands/#create_function","title":"create_function","text":"<p>Define a new function. Use with <code>--edit</code>.</p> <pre><code>create_function &lt;function&gt;\n</code></pre> <p><code>&lt;function&gt;</code> can be schema-qualified.</p> Example <p>To create a function named <code>create_user</code>:</p> <pre><code>create_function create_user\n</code></pre>"},{"location":"commands/#create_function_as","title":"create_function_as","text":"<p>Define a new function inline. Useful in scripts.</p> <pre><code>create_function_as &lt;function&gt; &lt;sql&gt;\n</code></pre> <p><code>&lt;function&gt;</code> can be schema-qualified.</p> Example <p>To define a function named <code>square</code>:</p> <pre><code>create_function_as square &lt;&lt;'EOF'\ncreate function square(number int) returns int as $$\nbegin\n    return number * number;\nend;\n$$ language plpgsql;\nEOF\n</code></pre>"},{"location":"commands/#grants","title":"Grants","text":"<p>\ud83d\udcd6 Refer to Postgres GRANT.</p>"},{"location":"commands/#grant_execute","title":"grant_execute","text":"<p>Grants execute permission on a function to a role.</p> <pre><code>grant_execute &lt;function&gt; &lt;signature&gt; &lt;role&gt;\n</code></pre> <p><code>&lt;function&gt;</code> can be schema-qualified.</p> Example <p>To grant execute permission on <code>login</code> to <code>dbuser</code>:</p> <pre><code>grant_execute login '(text,text)' dbuser\n</code></pre>"},{"location":"commands/#grant_schema_usage","title":"grant_schema_usage","text":"<p>Grant schema usage to a role.</p> <pre><code>grant_schema_usage &lt;schema&gt; &lt;role&gt;\n</code></pre> Example <p>To grant usage of the <code>api</code> schema to <code>dbuser</code>:</p> <pre><code>grant_schema_usage api dbuser\n</code></pre>"},{"location":"commands/#grant_role_membership","title":"grant_role_membership","text":"<p>Grant membership in a role.</p> <pre><code>grant_role_membership &lt;role_specification&gt; &lt;role&gt;\n</code></pre> Example <p>To grant membership in <code>authenticator</code> to <code>dbuser</code>:</p> <pre><code>grant_role_membership authenticator dbuser\n</code></pre>"},{"location":"commands/#grant_table_privilege","title":"grant_table_privilege","text":"<p>Grant privileges on a table.</p> <pre><code>grant_table_privilege &lt;type&gt; &lt;table&gt; &lt;role&gt;\n</code></pre> <p><code>&lt;table&gt;</code> can be schema-qualified.</p> Example <p>To allow an <code>dbuser</code> to insert into the <code>asset</code> table:</p> <pre><code>grant_privilege insert asset dbuser\n</code></pre>"},{"location":"commands/#roles","title":"Roles","text":"<p>\ud83d\udcd6 Refer to Postgres CREATE ROLE.</p>"},{"location":"commands/#create_role","title":"create_role","text":"<p>Creates a <code>nologin</code> role.</p> <pre><code>create_role &lt;role&gt;\n</code></pre> Example <p>To create a <code>dbuser</code> role:</p> <pre><code>create_role dbuser\n</code></pre>"},{"location":"commands/#create_login_role","title":"create_login_role","text":"<p>Creates a login role with a password.</p> <pre><code>create_login_role &lt;role&gt; &lt;password&gt;\n</code></pre> Example <p>To create a <code>dbuser</code> role with password, <code>securepass123</code>:</p> <pre><code>create_login_role dbuser 'securepass123'\n</code></pre>"},{"location":"commands/#schemas","title":"Schemas","text":"<p>\ud83d\udcd6 Refer to Postgres CREATE SCHEMA.</p>"},{"location":"commands/#create_schema","title":"create_schema","text":"<p>Enter a new schema into the database.</p> <pre><code>create_schema &lt;schema&gt;\n</code></pre> Example <p>To create a schema named <code>api</code>:</p> <pre><code>create_schema api\n</code></pre>"},{"location":"commands/#tables","title":"Tables","text":"<p>\ud83d\udcd6 Refer to Postgres CREATE TABLE.</p>"},{"location":"commands/#create_table","title":"create_table","text":"<p>Generates a migration to create a table. Use with <code>--edit</code>.</p> <pre><code>create_table &lt;table&gt;\n</code></pre> <p><code>&lt;table&gt;</code> can be schema-qualified.</p> Example <p>To create a table named <code>customer</code>:</p> <pre><code>create_table customer\n</code></pre> <p>The editor is launched for you to edit the function.</p>"},{"location":"commands/#create_table_as","title":"create_table_as","text":"<p>Create a new table in the database, inline. Useful in scripts.</p> <pre><code>create_table_as &lt;table&gt; &lt;sql&gt;\n</code></pre> <p><code>&lt;table&gt;</code> can be schema-qualified.</p> Example <p>To create a table named <code>customer</code>:</p> <pre><code>create_table_as customer &lt;&lt;'EOF'\ncreate table customer (\n  id bigint generated always as identity primary key,\n  created_at timestamp not null default now(),\n  name text not null\n);\nEOF\n</code></pre>"},{"location":"commands/#triggers","title":"Triggers","text":"<p>\ud83d\udcd6 Refer to Postgres CREATE TRIGGER.</p>"},{"location":"commands/#create_trigger","title":"create_trigger","text":"<p>Create a trigger on a table.</p> <pre><code>create_trigger &lt;trigger&gt; &lt;table&gt; &lt;function&gt;\n</code></pre> <p><code>&lt;table&gt;</code> and <code>&lt;function&gt;</code> can be schema-qualified.</p> <p>Note: Don't schema-qualify the <code>&lt;trigger&gt;</code>. From the Postgres docs:</p> <p>The name cannot be schema-qualified \u2014 the trigger inherits the schema of its table.</p> Example <p>To create a trigger named <code>customer_updated</code> that fires before updating a row in <code>customer</code>, calling <code>customer_updated</code>:</p> <pre><code>create_trigger customer_updated customer customer_updated\n</code></pre>"},{"location":"commands/#create_trigger_as","title":"create_trigger_as","text":"<p>Create a trigger on a table, inline.</p> <pre><code>create_trigger_as &lt;trigger&gt; &lt;table&gt; &lt;sql&gt;\n</code></pre> <p><code>&lt;table&gt;</code> can be schema-qualified.</p> Example <p>Create a trigger <code>modify</code> on table <code>contact</code> calling <code>modify_record</code>:</p> <pre><code>create_trigger_as modify contact &lt;&lt;'EOF'\ncreate trigger modify\n  after insert or update on contact\n  for each row execute function modify_record();\nEOF\n</code></pre>"},{"location":"installation/","title":"\ud83d\ude80 Installation","text":"<p>\u26a0\ufe0f Iko runs inside a container, so you'll need Docker installed.</p> <p>Install with:</p> <pre><code>curl -fsSL https://explodinglabs.com/scripts/install-iko.sh | sh\n</code></pre> <p>Verify it's working:</p> <pre><code>iko version\n</code></pre>"},{"location":"scripting/","title":"\u2728 Scripting Migrations","text":"<p>Write reusable Bash scripts to define database changes:</p> <p>scripts/auth.sh</p> <pre><code># Create an auth schema\ncreate_schema auth\n\n# Create a user table\ncreate_table_as auth.user &lt;&lt;'EOF'\ncreate table auth.user (\n  username text primary key check (length(username) &gt;= 3),\n  password text not null check (length(password) &lt; 512),\n  role name not null check (length(role) &lt; 512)\n);\nEOF\n\n# Add a function to hash passwords\ncreate_function_as auth.encrypt_pass &lt;&lt;'EOF'\ncreate function auth.encrypt_pass () returns trigger language plpgsql as $$\nbegin\n  if tg_op = 'INSERT' or new.password &lt;&gt; old.password then\n    new.password = crypt(new.password, gen_salt('bf'));\n  end if;\n  return new;\nend; $$\nEOF\n\n# Trigger it on insert/update\ncreate_trigger encrypt_pass auth.user auth.encrypt_pass\n</code></pre> <p>Run the script to generate migrations:</p> <pre><code>iko bash auth.sh\n</code></pre>"},{"location":"usage/","title":"\ud83d\udee0\ufe0f Usage","text":""},{"location":"usage/#1-initialise-a-project","title":"1. Initialise a project","text":"<pre><code>iko init --target db:pg://user:pass@postgres/dbname myapp\n</code></pre> <p>This creates a new project with a <code>sqitch.plan</code>, ready for migrations.</p>"},{"location":"usage/#2-create-a-migration","title":"2. Create a migration","text":"<pre><code>iko create_schema api\n</code></pre> <pre><code>Created deploy/create_schema_api.sql\nCreated revert/create_schema_api.sql\nCreated verify/create_schema_api.sql\nAdded \"create_schema_api\" to sqitch.plan\ncreate schema api;\n</code></pre> <p>What happened:</p> <ul> <li>Scripts were created to deploy, revert, and verify the change.</li> <li>The change was added to sqitch.plan.</li> <li>The deploy script was output for your review.</li> </ul>"},{"location":"usage/#3-deploy-it","title":"3. Deploy it","text":"<p>Make sure your database is running, then:</p> <pre><code>iko deploy\n</code></pre>"}]}